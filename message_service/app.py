from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import mysql.connector
import datetime
import json
import requests

app = Flask(__name__)
CORS(app, supports_credentials=True)

# other services
USER_SERVICE_URL = os.environ.get('USER_SERVICE_URL', 'http://user-service:5001')
GROUP_CHAT_SERVICE_URL = os.environ.get('GROUP_CHAT_SERVICE_URL', 'http://group-chat-service:5004')

def get_db_connection():
    return mysql.connector.connect(
        host=os.environ.get('DB_HOST', 'mysql'),
        user=os.environ.get('DB_USER', 'root'),
        password=os.environ.get('DB_PASSWORD', 'password'),
        database=os.environ.get('DB_NAME', 'messaging_app')
    )

def create_tables():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS messages (
        id INT AUTO_INCREMENT PRIMARY KEY,
        sender_id INT NOT NULL,
        recipient_id INT NOT NULL,
        content TEXT NOT NULL,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        INDEX (sender_id),
        INDEX (recipient_id)
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS group_messages (
        id INT AUTO_INCREMENT PRIMARY KEY,
        group_id VARCHAR(255) NOT NULL,
        sender_id VARCHAR(255) NOT NULL,
        content TEXT NOT NULL,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        INDEX (group_id),
        INDEX (sender_id)
    )
    ''')
    
    conn.commit()
    cursor.close()
    conn.close()
    print("Messages table created")

# calling other services
def get_user_info(user_id):
    try:
        response = requests.get(f'{USER_SERVICE_URL}/api/users/{user_id}')
        if response.status_code == 200:
            return response.json()
        return None
    except:
        return None

def get_group_info(group_id):
    try:
        response = requests.get(f'{GROUP_CHAT_SERVICE_URL}/groups/{group_id}')
        if response.status_code == 200:
            return response.json()
        return None
    except:
        return None

################### Direct message endpoints ###################

@app.route('/api/messages/send', methods=['POST'])
def send_message():
    data = request.json
    sender_id = data.get('sender_id')
    recipient_id = data.get('recipient_id')
    content = data.get('content')

    # check if sender and recipient exist
    sender_info = get_user_info(sender_id)
    recipient_info = get_user_info(recipient_id)

    if not sender_info or not recipient_info:
        return jsonify({'error': 'Invalid sender or recipient ID'}), 400
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute(
        'INSERT INTO messages (sender_id, recipient_id, content) VALUES (%s, %s, %s)',
        (sender_id, recipient_id, content)
    )
    
    message_id = cursor.lastrowid # get the id of the message
    conn.commit()
    cursor.close()
    conn.close()
    
    return jsonify({
        'id': message_id,
        'sender_id': sender_id,
        'recipient_id': recipient_id,
        'content': content,
        'timestamp': datetime.datetime.now().isoformat()
    }), 201

@app.route('/api/messages/conversation/<int:other_user_id>', methods=['GET'])
def get_conversation(other_user_id):
    """get message between two users"""
    user_id = request.args.get('user_id')
    user_id = int(user_id)
    
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    
    cursor.execute('''
    SELECT * FROM messages 
    WHERE (sender_id = %s AND recipient_id = %s) OR (sender_id = %s AND recipient_id = %s)
    ORDER BY timestamp ASC
    ''', (user_id, other_user_id, other_user_id, user_id))
    
    messages = cursor.fetchall()
    cursor.close()
    conn.close()
    
    for message in messages:
        message['timestamp' ] = message['timestamp'].isoformat() 
        sender_info = get_user_info(message['sender_id'])
        message['sender_username'] = sender_info.get('username')
    
    return jsonify(messages), 200

@app.route('/api/messages/conversations', methods=['GET'])
def get_conversations():
    """lists all conversations where user is involved"""
    user_id = request.args.get('user_id')
    if not user_id:
        return jsonify({'error': 'User ID required'}), 400
    
    try:
        user_id = int(user_id)
    except ValueError:
        return jsonify({'error': 'Invalid user ID'}), 400
    
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    
    # SQL generated by copilot btw (too lazy to write it)
    cursor.execute(''' 
    SELECT 
        m.sender_id, 
        m.recipient_id, 
        m.content, 
        m.timestamp,
        CASE
            WHEN m.sender_id = %s THEN m.recipient_id
            ELSE m.sender_id
        END AS user_id
    FROM messages m
    INNER JOIN (
        SELECT 
            CASE
                WHEN sender_id = %s THEN recipient_id
                ELSE sender_id
            END AS user_id,
            MAX(timestamp) as max_timestamp
        FROM messages
        WHERE sender_id = %s OR recipient_id = %s
        GROUP BY user_id
    ) latest ON (
        (m.sender_id = %s AND m.recipient_id = latest.user_id) OR
        (m.sender_id = latest.user_id AND m.recipient_id = %s)
    ) AND m.timestamp = latest.max_timestamp
    ORDER BY m.timestamp DESC
    ''', (user_id, user_id, user_id, user_id, user_id, user_id))
    
    conversations = cursor.fetchall()
    cursor.close()
    conn.close()
    
    result = []
    for conv in conversations:

        other_user_id = conv['user_id' ]
        user_info = get_user_info(other_user_id)
        
        if user_info:
            result.append({
                'user_id': other_user_id,
                'username': user_info.get('username', 'Unknown User'),
                'last_message': {
                    'content': conv['content'],
                    'timestamp': conv['timestamp'].isoformat(),
                    'is_sent_by_me': conv['sender_id'] == user_id
                },
                'unread_count': 0,  
                'type': 'direct'
            })
    
    return jsonify(result), 200

################### Group message endpoints ###################

@app.route('/api/messages/group/send', methods=['POST'])
def send_group_message():
    data = request.json
    group_id = data.get('group_id')
    sender_id = data.get('sender_id')
    content = data.get('content')
    
    print(f"HERE")
    
    if not group_id or not sender_id or not content:
        return jsonify({'error': 'Missing required fields'}), 400
    
    sender_id = str(sender_id)
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute(
        'INSERT INTO group_messages (group_id, sender_id, content) VALUES (%s, %s, %s)',
        (group_id, sender_id, content)
    )
        
    message_id = cursor.lastrowid
    conn.commit()
    cursor.close()
    conn.close()
        
    print("here2")
        
    return jsonify({
        'id': message_id,
        'group_id': group_id,
        'sender_id': sender_id,
        'content': content,
        'timestamp': datetime.datetime.now().isoformat()
    }), 201


@app.route('/api/messages/group/<group_id>', methods=['GET'])
def get_group_messages( group_id):
    user_id = request.args.get('user_id')
    user_id = int(user_id)

    print(f"Fetching group messages for group {group_id}, requested by user {user_id}")
    user_id_str = str(user_id)
    response = requests.get(f'{GROUP_CHAT_SERVICE_URL}/groups/{group_id}')
        
    if response.status_code != 200:
        print(f"group not found: {response.status_code}")
        return jsonify({'error': 'group not found'}), 404
        
    group_data = response.json()
        
    group_members = [str(member) for member in group_data.get('members', [])]
        
    print(f"Group members: {group_members}, User: {user_id_str}")
        
    if user_id_str not in group_members:
        print(f"User {user_id_str} is not a member of group {group_id}")
        return jsonify({'error': 'You are not a member of this group'}), 403

    
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    
    cursor.execute('''
    SELECT * FROM group_messages 
    WHERE group_id = %s
    ORDER BY timestamp ASC
    ''', (group_id,))
        
    messages = cursor.fetchall()
    cursor.close()
    conn.close()
        
        
    formatted_messages = []
    for message in messages:
        formatted_message = {
            'id': message['id'],
            'group_id': message['group_id'],
            'sender_id': message['sender_id'],
            'content': message['content'],
            'timestamp': message['timestamp'].isoformat() # needs wierd formatting
        }
            
        sender_info = get_user_info(message['sender_id'])
        if sender_info:
            formatted_message['sender_username'] = sender_info.get('username')
        else:
            formatted_message['sender_username'] = 'Unknown User'
            
        formatted_messages.append(formatted_message)
        
    return jsonify(formatted_messages), 200


@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({'status': 'healthy', 'service': 'message-service'}), 200

if __name__ == '__main__':
    create_tables()
    app.run(host='0.0.0.0', port=5002, debug=True) 